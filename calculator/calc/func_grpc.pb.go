// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: func.proto

package calc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculatorServiceClient is the client API for CalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorServiceClient interface {
	// SUM API : Unary Operation
	ComputeSum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
	// Prime API : Server-Side Streaming
	ComputePrime(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (CalculatorService_ComputePrimeClient, error)
	// Average API : Client-Side Streaming
	ComputeAvg(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_ComputeAvgClient, error)
	// FMN API : BIDI Streaming
	ComputeFMN(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_ComputeFMNClient, error)
}

type calculatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorServiceClient(cc grpc.ClientConnInterface) CalculatorServiceClient {
	return &calculatorServiceClient{cc}
}

func (c *calculatorServiceClient) ComputeSum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/CalculatorService/ComputeSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorServiceClient) ComputePrime(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (CalculatorService_ComputePrimeClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[0], "/CalculatorService/ComputePrime", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceComputePrimeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalculatorService_ComputePrimeClient interface {
	Recv() (*PrimeResponse, error)
	grpc.ClientStream
}

type calculatorServiceComputePrimeClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceComputePrimeClient) Recv() (*PrimeResponse, error) {
	m := new(PrimeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) ComputeAvg(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_ComputeAvgClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[1], "/CalculatorService/ComputeAvg", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceComputeAvgClient{stream}
	return x, nil
}

type CalculatorService_ComputeAvgClient interface {
	Send(*AvgRequest) error
	CloseAndRecv() (*AvgResponse, error)
	grpc.ClientStream
}

type calculatorServiceComputeAvgClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceComputeAvgClient) Send(m *AvgRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceComputeAvgClient) CloseAndRecv() (*AvgResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AvgResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) ComputeFMN(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_ComputeFMNClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[2], "/CalculatorService/ComputeFMN", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceComputeFMNClient{stream}
	return x, nil
}

type CalculatorService_ComputeFMNClient interface {
	Send(*FMNRequest) error
	Recv() (*FMNResponse, error)
	grpc.ClientStream
}

type calculatorServiceComputeFMNClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceComputeFMNClient) Send(m *FMNRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceComputeFMNClient) Recv() (*FMNResponse, error) {
	m := new(FMNResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorServiceServer is the server API for CalculatorService service.
// All implementations must embed UnimplementedCalculatorServiceServer
// for forward compatibility
type CalculatorServiceServer interface {
	// SUM API : Unary Operation
	ComputeSum(context.Context, *SumRequest) (*SumResponse, error)
	// Prime API : Server-Side Streaming
	ComputePrime(*PrimeRequest, CalculatorService_ComputePrimeServer) error
	// Average API : Client-Side Streaming
	ComputeAvg(CalculatorService_ComputeAvgServer) error
	// FMN API : BIDI Streaming
	ComputeFMN(CalculatorService_ComputeFMNServer) error
	mustEmbedUnimplementedCalculatorServiceServer()
}

// UnimplementedCalculatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorServiceServer struct {
}

func (UnimplementedCalculatorServiceServer) ComputeSum(context.Context, *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeSum not implemented")
}
func (UnimplementedCalculatorServiceServer) ComputePrime(*PrimeRequest, CalculatorService_ComputePrimeServer) error {
	return status.Errorf(codes.Unimplemented, "method ComputePrime not implemented")
}
func (UnimplementedCalculatorServiceServer) ComputeAvg(CalculatorService_ComputeAvgServer) error {
	return status.Errorf(codes.Unimplemented, "method ComputeAvg not implemented")
}
func (UnimplementedCalculatorServiceServer) ComputeFMN(CalculatorService_ComputeFMNServer) error {
	return status.Errorf(codes.Unimplemented, "method ComputeFMN not implemented")
}
func (UnimplementedCalculatorServiceServer) mustEmbedUnimplementedCalculatorServiceServer() {}

// UnsafeCalculatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorServiceServer will
// result in compilation errors.
type UnsafeCalculatorServiceServer interface {
	mustEmbedUnimplementedCalculatorServiceServer()
}

func RegisterCalculatorServiceServer(s grpc.ServiceRegistrar, srv CalculatorServiceServer) {
	s.RegisterService(&CalculatorService_ServiceDesc, srv)
}

func _CalculatorService_ComputeSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).ComputeSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CalculatorService/ComputeSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).ComputeSum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorService_ComputePrime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServiceServer).ComputePrime(m, &calculatorServiceComputePrimeServer{stream})
}

type CalculatorService_ComputePrimeServer interface {
	Send(*PrimeResponse) error
	grpc.ServerStream
}

type calculatorServiceComputePrimeServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceComputePrimeServer) Send(m *PrimeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalculatorService_ComputeAvg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).ComputeAvg(&calculatorServiceComputeAvgServer{stream})
}

type CalculatorService_ComputeAvgServer interface {
	SendAndClose(*AvgResponse) error
	Recv() (*AvgRequest, error)
	grpc.ServerStream
}

type calculatorServiceComputeAvgServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceComputeAvgServer) SendAndClose(m *AvgResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceComputeAvgServer) Recv() (*AvgRequest, error) {
	m := new(AvgRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CalculatorService_ComputeFMN_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).ComputeFMN(&calculatorServiceComputeFMNServer{stream})
}

type CalculatorService_ComputeFMNServer interface {
	Send(*FMNResponse) error
	Recv() (*FMNRequest, error)
	grpc.ServerStream
}

type calculatorServiceComputeFMNServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceComputeFMNServer) Send(m *FMNResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceComputeFMNServer) Recv() (*FMNRequest, error) {
	m := new(FMNRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorService_ServiceDesc is the grpc.ServiceDesc for CalculatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CalculatorService",
	HandlerType: (*CalculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComputeSum",
			Handler:    _CalculatorService_ComputeSum_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ComputePrime",
			Handler:       _CalculatorService_ComputePrime_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ComputeAvg",
			Handler:       _CalculatorService_ComputeAvg_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ComputeFMN",
			Handler:       _CalculatorService_ComputeFMN_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "func.proto",
}
